name: MPV_OWN

on: 
  schedule:
    - cron: '0 8 * * */4'
  workflow_dispatch:
    inputs:
      needclean:
        description: 'Delete cache and completely rebuild erverything'
        required: false
        default: false
        type: boolean
      release:
        description: "Publish a release"
        required: false
        default: false
        type: boolean
      prune:
        description: "Prune old releases"
        required: false
        default: false
        type: boolean
      command:
        description: 'input command you want to run before build'
        required: false
      cache_id:
        description: 'input cache_id if you want to renew cache'
        required: false

jobs:
  build_mpv:
    name: Build MPV
    runs-on: ubuntu-latest
    strategy:
      matrix:
        bit: [64]
    outputs:
      sha: ${{ steps.get_sha.outputs.sha }}

    steps:
      - uses: actions/checkout@v2
      - name: 'Get mpv latest commit sha'
        id: get_sha
        uses: actions/github-script@v6
        with:
          script: |
            const commit = await github.rest.repos.getCommit({
              owner: 'dyphire',
              repo: 'mpv',
              ref: `tests`
            })
            core.setOutput('sha', String(commit.data.sha))
      - name: Get current time
        run: |
          echo "short_time=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
          echo "month=$(date "+%Y-%m")" >> $GITHUB_ENV
      
      - name: Cache
        uses: actions/cache@v2
        with:
          path: mpv-winbuild-cmake/build${{ matrix.bit }}
          key: ${{ runner.os }}-mpv-build${{ matrix.bit }}-${{ env.short_time }}-${{ steps.get_sha.outputs.sha }}-${{ github.event.inputs.cache_id }}
          restore-keys: |
            ${{ runner.os }}-mpv-build${{ matrix.bit }}-${{ env.short_time }}-${{ steps.get_sha.outputs.sha }}
            ${{ runner.os }}-mpv-build${{ matrix.bit }}-${{ env.short_time }}
            ${{ runner.os }}-mpv-build${{ matrix.bit }}-${{ env.month }}
      - name: Build
        id: build
        shell: bash
        run: |
          sudo bash build_own.sh "${{ matrix.bit }}" "${{ github.event.inputs.needclean }}" "${{ github.event.inputs.command }}"
      - name: Collect error logs
        if: ${{ always() && steps.build.outcome == 'failure' }}
        run: |
          sudo 7z a logs.7z mpv-winbuild-cmake/build${{ matrix.bit }}/*-err.log -r
      - name: upload error logs
        uses: actions/upload-artifact@master
        if: ${{ always() && steps.build.outcome == 'failure' }}
        with:
          name: logs
          path: logs.7z

      - name: "Get artifacts' name and path"
        id: get_files
        uses: actions/github-script@v6
        with:
          script: |
            const path = require('path');
            const types = [ "mpv-dev", "mpv"];
            const arch = ${{ matrix.bit }} == "64" ? "x86_64" : "i686";
            for (let type of types) {
              const globber = await glob.create(`mpv-winbuild-cmake/release/${type}-${arch}-*.7z`);
              const files = await globber.glob();
              if ( files.length > 0 ) {
                const file = files[0];
                core.exportVariable( `${type}-name`, path.basename(file) );
                core.exportVariable( `${type}-path`, file );
              }
            }
      - name: upload mpv-dev
        uses: actions/upload-artifact@master
        if: ${{ env.mpv-dev-name && env.mpv-dev-path }}
        with:
          name: ${{ env.mpv-dev-name }}
          path: ${{ env.mpv-dev-path }}
      - name: upload mpv
        uses: actions/upload-artifact@master
        if: ${{ env.mpv-name && env.mpv-path }}
        with:
          name: ${{ env.mpv-name }}
          path: ${{ env.mpv-path }}

  publish_release:
    name: Publish release
    needs: build_mpv
    if: ${{ github.event.inputs.release != 'false' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
    
      - name: Get current time
        run: |
          echo "long_time=$(date "+%Y-%m-%d %H:%M")" >> $GITHUB_ENV
          echo "short_time=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
      - name: Commit version & remove existing tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          git fetch --tags
          git checkout version || git checkout -b version origin/version || ( git checkout --orphan version && git rm -rf . )
          echo -e "${{ env.short_time }}" > version
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add version
          git diff-index --quiet HEAD || ( git commit -m "${{ env.short_time }}" && git push origin version )
          if [ $(git tag -l "${{ env.short_time }}") ] ;then
            gh release delete "${{ env.short_time }}" || true
            git push --delete origin "${{ env.short_time }}" || true
            git tag -d "${{ env.short_time }}" || true
          fi
          git checkout patch
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/*/*.7z"
          commit: version
          name: "MPV_OWN ${{ env.long_time }}"
          body: "**MPV git commit**: https://github.com/dyphire/mpv/commit/${{ needs.build_mpv.outputs.sha }}\n- merged: https://github.com/mpv-player/mpv/pull/8865, https://github.com/mpv-player/mpv/pull/9360, https://github.com/mpv-player/mpv/pull/9621, https://github.com/mpv-player/mpv/pull/9664, https://github.com/mpv-player/mpv/pull/9856\n\n**Test**: Build with libass from [dyphire/libass_dev](https://github.com/dyphire/libass/tree/dev)\n- Ass: it can fix some problems for scaled with PlayResX\n- Font: partial unicode name support for Windows\n\n**Remove**: \n- gpu: angle direct3d\n- encoders: aom lame libopusenc nvenc x264 x265\n- ao: libsdl2 openal-soft\n- libass: fontconfig\n- game-music-emu\n\n**Remember**: This is not perfect\n**Build Time**: ${{ env.long_time }}"
          tag: "mpv_own-${{ env.short_time }}"
          allowUpdates: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Prune old releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ github.event.inputs.prune != 'false' }}
        shell: bash
        run: |
          git checkout patch
          bash prunetags.sh

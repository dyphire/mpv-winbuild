name: MPV

on: 
  schedule:
    - cron: '0 8 * * */4'
  workflow_dispatch:
    inputs:
      winbuild_repo:
        required: true
        default: 'dyphire/mpv-winbuild-cmake'
      winbuild_ref:
        required: true
        default: 'patch'
      mpv_owner:
        required: true
        default: 'dyphire'
      mpv_ref:
        required: true
        default: 'patch'
      build_target:
        description: "Build target"
        required: false
        default: "all-64bit"
        type: choice
        options:
        - 32bit
        - 64bit
        - 64bit-v3
        - all-64bit
        - all
      needclean:
        description: 'Delete cache and completely rebuild erverything'
        required: false
        default: 'false'
        type: boolean
      release:
        description: "Publish a release"
        required: false
        default: 'true'
        type: boolean
      prune:
        description: "Prune old releases"
        required: false
        default: 'true'
        type: boolean
      command:
        description: 'input command you want to run before build'
        required: false
      cache_id:
        description: 'input cache_id if you want to renew cache'
        required: false

# Workflow level env does not work properly in all fields.
# https://github.com/actions/runner/issues/480
env:
  winbuildrepo: 'dyphire/mpv-winbuild-cmake'
  winbuildref: 'patch'
  mpvowner: 'dyphire'
  mpvref: 'patch'
  release: 'true'
  prune: 'true'

jobs:
  # https://github.com/actions/runner/issues/480#issuecomment-1055373623
  params:
    runs-on: ubuntu-latest
    outputs:
      params: ${{ steps.env-vars.outputs.params }}
      matrix: ${{ steps.script.outputs.matrix }}
    steps:
      - name: Generate cache_id
        run: |
          if [ "${{ github.event.inputs.cache_id }}" ] ; then
            echo "cache_id=${{ github.event.inputs.cache_id }}" >> $GITHUB_ENV
          else
            echo "cache_id=$(echo $RANDOM | md5sum | head -c 20)" >> $GITHUB_ENV
          fi
      - name: Set winbuild_repo
        run: |
          if [ "${{ github.event.inputs.winbuild_repo }}" ] ; then
            echo "winbuild_repo=${{ github.event.inputs.winbuild_repo }}" >> $GITHUB_ENV
          else
            echo "winbuild_repo=${{ env.winbuildrepo }}" >> $GITHUB_ENV
          fi
      - name: Set winbuild_ref
        run: |
          if [ "${{ github.event.inputs.winbuild_ref }}" ] ; then
            echo "winbuild_ref=${{ github.event.inputs.winbuild_ref }}" >> $GITHUB_ENV
          else
            echo "winbuild_ref=${{ env.winbuildref }}" >> $GITHUB_ENV
          fi
      - name: Set mpv_owner
        run: |
          if [ "${{ github.event.inputs.mpv_owner }}" ] ; then
            echo "mpv_owner=${{ github.event.inputs.mpv_owner }}" >> $GITHUB_ENV
          else
            echo "mpv_owner=${{ env.mpvowner }}" >> $GITHUB_ENV
          fi
      - name: Set mpv_ref
        run: |
          if [ "${{ github.event.inputs.mpv_ref }}" ] ; then
            echo "mpv_ref=${{ github.event.inputs.mpv_ref }}" >> $GITHUB_ENV
          else
            echo "mpv_ref=${{ env.mpvref }}" >> $GITHUB_ENV
          fi
      - id: script
        uses: actions/github-script@v6
        with:
          script: |
            const commit = await github.rest.repos.getCommit({
              owner: '${{ env.mpv_owner }}',
              repo: 'mpv',
              ref: '${{ env.mpv_ref }}'
            })
            core.exportVariable('sha', String(commit.data.sha))
            
            let matrix = {};
            let build_target = "${{ github.event.inputs.build_target }}"
            switch ( build_target ) {
              case "32bit":
                matrix.bit = ["32"];
                break;
              case "64bit":
                matrix.bit = ["64"];
                break;
              case "64bit-v3":
                matrix.bit = ["64-v3"];
                break;
              case "all-64bit":
                matrix.bit = ["64","64-v3"];
                break;
              case "all":
                matrix.bit = ["32","64","64-v3"];
                break;
              default:
                matrix.bit = ["64","64-v3"];
                break;
            }
            core.setOutput("matrix",JSON.stringify(matrix));
      - id: env-vars
        name: Output environment variables
        run: echo "params=$(echo $(jq -n 'env'))" >> $GITHUB_OUTPUT

  build_mpv:
    name: Build MPV
    needs: params
    runs-on: ubuntu-latest
    container:
      image: archlinux/archlinux:base-devel
    continue-on-error: true
    strategy:
      matrix: ${{ fromJson(needs.params.outputs.matrix) }}

    steps:
      - name: Install Dependencies
        run: |
          sudo echo -e "[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
          sudo pacman -Syu --noconfirm
          sudo pacman -S --noconfirm --needed git gyp mercurial subversion ninja cmake ragel yasm nasm asciidoc enca gperf unzip p7zip gcc-multilib clang python-pip curl lib32-glib2 wget
          pip3 install -U setuptools rst2pdf mako https://github.com/mesonbuild/meson/archive/refs/heads/master.zip
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global pull.rebase true
          git config --global rebase.autoStash true
          git config --global fetch.prune true
          git config --global --add safe.directory $(pwd)
          git config --global --add safe.directory $(pwd)/mpv-winbuild-cmake
      - uses: actions/checkout@v3
      - name: Checkout toolchain
        uses: actions/checkout@v3
        with:
          repository: ${{ fromJson(needs.params.outputs.params).winbuild_repo }}
          ref: ${{ fromJson(needs.params.outputs.params).winbuild_ref }}
          path: mpv-winbuild-cmake
      - name: Get Params
        run: |
          echo "sha=${{ fromJson(needs.params.outputs.params).sha }}" >> $GITHUB_ENV
          echo "short_time=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
          echo "cache_id=${{ fromJson(needs.params.outputs.params).cache_id }}" >> $GITHUB_ENV

      - name: Cache Sources
        uses: actions/cache@v3.0.11
        with:
          path: ${{ github.workspace }}/mpv-winbuild-cmake/src_packages
          key: ${{ runner.os }}-source-${{ env.short_time }}-${{ env.sha }}-${{ env.cache_id }}
          restore-keys: |
            ${{ runner.os }}-source-${{ env.short_time }}-${{ env.sha }}
            ${{ runner.os }}-source-${{ env.short_time }}
            ${{ runner.os }}-source
      - name: Cache
        uses: actions/cache@v3.0.11
        with:
          path: ${{ github.workspace }}/mpv-winbuild-cmake/build${{ matrix.bit }}
          key: ${{ runner.os }}-mpv-build${{ matrix.bit }}-${{ env.short_time }}-${{ env.sha }}-${{ env.cache_id }}
          restore-keys: |
            ${{ runner.os }}-mpv-build${{ matrix.bit }}-${{ env.short_time }}-${{ env.sha }}
            ${{ runner.os }}-mpv-build${{ matrix.bit }}-${{ env.short_time }}
            ${{ runner.os }}-mpv-build${{ matrix.bit }}
      - name: Clean Cache
        if: ${{ github.event.inputs.needclean == 'true' }}
        shell: bash
        run: |
          cd mpv-winbuild-cmake
          rm -rf build${{ matrix.bit }} || true
          rm -rf src_packages || true
      - name: Running custom command
        if: ${{ github.event.inputs.command != '' }}
        shell: bash
        continue-on-error: true
        run: |
          cd mpv-winbuild-cmake
          bit="${{ matrix.bit }}"
          gitdir=$(pwd)
          buildroot=$(pwd)
          srcdir=$(pwd)/src_packages
          builddir=$buildroot/build$bit
          if [ $bit == "32" ]; then
              arch="i686"
          elif [ $bit == "64" ]; then
              arch="x86_64"
          elif [ $bit == "64-v3" ]; then
              arch="x86_64"
              gcc_arch=-DGCC_ARCH=x86-64-v3
              x86_64_level=-v3
          fi
          set -x
          ${{ github.event.inputs.command }}
      - name: Build
        id: build
        shell: bash
        run: |
          chmod +x build.sh
          cd mpv-winbuild-cmake
          bash ../build.sh '${{ matrix.bit }}'
      - name: Collect error logs
        if: ${{ always() && steps.build.outcome == 'failure' }}
        run: |
          sudo 7z a logs.7z mpv-winbuild-cmake/build${{ matrix.bit }}/*-*.log -r
      - name: Upload error logs
        uses: actions/upload-artifact@master
        if: ${{ always() && steps.build.outcome == 'failure' }}
        with:
          name: logs
          path: logs.7z

      - name: "Get artifacts' name and path"
        id: get_files
        uses: actions/github-script@v6
        with:
          script: |
            const path = require('path');
            const types = [ "mpv-dev", "mpv"];
            let arch="";
            switch ( "${{ matrix.bit }}" ) {
              case "32":
                arch = "i686";
                break;
              case "64":
                arch = "x86_64";
                break;
              case "64-v3":
                arch = "x86_64-v3";
                break;
            }
            for (let type of types) {
              const globber = await glob.create(`mpv-winbuild-cmake/release/${type}-${arch}-*.7z`);
              const files = await globber.glob();
              if ( files.length > 0 ) {
                const file = files[0];
                core.exportVariable( `${type}_name`, path.basename(file) );
                core.exportVariable( `${type}_path`, file );
              }
            }

            let { stdout: ffmpeg_hash } = await exec.getExecOutput("git -C mpv-winbuild-cmake/src_packages/ffmpeg rev-parse --short HEAD");
            ffmpeg_hash = ffmpeg_hash.trim();
            const ffmpeg_name = `ffmpeg-${arch}-git-${ffmpeg_hash}`;
            core.exportVariable( 'ffmpeg_name', ffmpeg_name );
            await exec.exec(`7z a -m0=lzma2 -mx=9 -ms=on mpv-winbuild-cmake/release/${ffmpeg_name}.7z ./mpv-winbuild-cmake/build${{ matrix.bit }}/install/mingw/bin/ffmpeg.exe`)

      - name: Upload mpv-dev
        uses: actions/upload-artifact@v3
        if: ${{ env.mpv-dev_name && env.mpv-dev_path }}
        with:
          name: ${{ env.mpv-dev_name }}
          path: ${{ env.mpv-dev_path }}
      - name: Upload mpv
        uses: actions/upload-artifact@v3
        if: ${{ env.mpv_name && env.mpv_path }}
        with:
          name: ${{ env.mpv_name }}
          path: ${{ env.mpv_path }}
#      - name: Upload ffmpeg
#        uses: actions/upload-artifact@v3
#        if: ${{ env.ffmpeg_name }}
#        with:
#          name: ${{ env.ffmpeg_name }}
#          path: mpv-winbuild-cmake/release/${{ env.ffmpeg_name }}.7z


      - name: "Job summary"
        uses: actions/github-script@v6
        continue-on-error: true
        if: ${{ always() }}
        with:
          script: |
            const path = require('path');
            const { readdirSync,existsSync } = require('fs');
            const myExec = async (command, args = null) => await exec.getExecOutput(command,args,{silent: true}).then(result => result.stdout.trim());
            
            const toolchainDir = path.resolve("mpv-winbuild-cmake");
            const workdir = path.resolve(toolchainDir,"src_packages");
            const isGitSync = dirname => existsSync(path.join(workdir, dirname, '.git'));
            
            const getGithubUrl = (hash,remote) => remote.replace(/\.git$/,"") + `/commit/${hash}`;
            const getGitlabUrl = (hash,remote) => remote.replace(/\.git$/,"") + `/-/commit/${hash}`;
            const getBitbucketUrl = (hash,remote) => remote.replace(/\.git$/,"") + `/commits/${hash}`;
            const getGoogleSourceUrl = (hash,remote) => remote + `/+/${hash}`;            
            const gethGitVideolanUrl = (hash,remote) => remote.replace(/\/git\//,"/?p=") + `;a=commit;h=${hash}`;
            const getCgitUrl = (hash,remote) => remote + `/commit/?id=${hash}`;
            function getCommitUrl(hash,remote) {
                let url = "";
                switch (true) {
                  case /github\.com/.test(remote):
                    url = getGithubUrl(hash,remote);
                    break;
                  case /(gitlab\.com|code\.videolan\.org|gitlab\.gnome\.org)/.test(remote):
                    url = getGitlabUrl(hash,remote);
                    break;
                  case /bitbucket\.org/.test(remote):
                    url = getBitbucketUrl(hash,remote);
                    break;
                  case /googlesource\.com/.test(remote):
                    url = getGoogleSourceUrl(hash,remote);
                    break;
                  case /git\.videolan\.org/.test(remote):
                    url = gethGitVideolanUrl(hash,remote);
                    break;
                  case /git\.libssh\.org/.test(remote):
                    url = getCgitUrl(hash,remote);
                    break;
                  default:
                    url = remote;
                    break;
                }
                return url;
            }
            
            const dirs = readdirSync(workdir, { withFileTypes: true }).filter(dirent => dirent.isDirectory() && isGitSync(dirent.name) ).map(dirent => path.join(workdir, dirent.name));
            let packages_table = [[{data: 'Package', header: true}, {data: 'Local commit', header: true}, {data: 'Status', header: true}, {data: 'Remote commit', header: true}]];
            for (let dir of dirs) {
              let local_hash = await myExec(`git -C ${dir} rev-parse --short=7 HEAD`);
              let remote_branch = await myExec(`git -C ${dir} rev-parse --abbrev-ref HEAD@{upstream}`);
              let remote_hash = await myExec(`git -C ${dir} rev-parse ${remote_branch}`);
              let status = await myExec(`git -C ${dir} status -sb`).then(s => s.split("\n",1)[0].replace(/^## */,""));
              let remote = await myExec(`git -C ${dir} config --get remote.origin.url`);
              let url = getCommitUrl(remote_hash, remote);
              let package_name = path.basename(dir);
              packages_table.push([package_name, local_hash, status, `<a href="${url}">${remote_hash.slice(0,7)}</a>`]);
            }
            let toolchain_hash = await myExec(`git -C ${toolchainDir} rev-parse HEAD`);
            let toolchain_remote = await myExec(`git -C ${toolchainDir} config --get remote.origin.url`);
            let toolchain_url = getCommitUrl(toolchain_hash, toolchain_remote);
            
            await core.summary
            .addHeading('Basic Info')
            .addRaw(`toolchain: <a href="${toolchain_url}">${toolchain_hash.slice(0,7)}</a>`,true)
            .addHeading('Packages Version')
            .addTable(packages_table)
            .write();

  publish_release:
    name: Publish release
    needs: [build_mpv,params]
    if: ${{ (github.event.inputs.release != null && github.event.inputs.release == 'true') || (github.event.inputs.release == null && fromJson(needs.params.outputs.params).release == 'true') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: "Check artifacts"
        uses: actions/github-script@v6
        with:
          script: |
            const globber = await glob.create(`artifacts/*/mpv*.7z`);
            const files = await globber.glob();
            if ( files.length == 0 ) {
              core.setFailed("Artifact does not exist!");
            }
      - name: Get current time
        run: |
          echo "long_time=$(date "+%Y-%m-%d %H:%M")" >> $GITHUB_ENV
          echo "short_time=$(date "+%Y-%m-%d")" >> $GITHUB_ENV

      - name: Commit version & remove existing tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          git fetch --tags
          git checkout version || git checkout -b version origin/version || ( git checkout --orphan version && git rm -rf . )
          echo -e "${{ env.short_time }}" > version
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add version
          git diff-index --quiet HEAD || ( git commit -m "${{ env.short_time }}" && git push origin version )
          if [ $(git tag -l "${{ env.short_time }}") ] ;then
            gh release delete "${{ env.short_time }}" || true
            git push --delete origin "${{ env.short_time }}" || true
            git tag -d "${{ env.short_time }}" || true
          fi
          git checkout master
      - name: Create release for dyphire/mpv
        uses: ncipollo/release-action@v1
        if: ${{ ( fromJson(needs.params.outputs.params).winbuild_repo == 'dyphire/mpv-winbuild-cmake' && fromJson(needs.params.outputs.params).winbuild_ref == 'patch' ) }}
        with:
          artifacts: "artifacts/*/*.7z"
          commit: version
          name: "MPV_OWN ${{ env.long_time }}"
          body: "**MPV git commit**: https://github.com/dyphire/mpv/commit/${{ fromJson(needs.params.outputs.params).sha }}\n- Remove video encoders: x264, x265, aom, libvpx, xvidcore\n- LuaSocket is built and included, so [simple-mpv-webui](https://github.com/open-dynaMIX/simple-mpv-webui) can be used out of the box\n- Merged: https://github.com/mpv-player/mpv/pull/8865, https://github.com/mpv-player/mpv/pull/9360, https://github.com/mpv-player/mpv/pull/9621, https://github.com/mpv-player/mpv/pull/9664, https://github.com/mpv-player/mpv/pull/9856\n- Test: add `--auto-window-resize`,`--sub-fonts-dir`,`--osd-fonts-dir`,`--subs-fallback`,`--subs-fallback-forced`, `--secondary-sub-override` and `--sub-ass-feature-*` options\n\n**Build Details**: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n**Build Time**: ${{ env.long_time }}"
          tag: "mpv_own-${{ env.short_time }}"
          allowUpdates: true
          artifactErrorsFailBuild: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create release for mpv-player/mpv
        uses: ncipollo/release-action@v1
        if: ${{ ( fromJson(needs.params.outputs.params).winbuild_repo == 'shinchiro/mpv-winbuild-cmake') }}
        with:
          artifacts: "artifacts/*/*.7z"
          commit: version
          name: "MPV ${{ env.long_time }}"
          body: "**MPV git commit**: https://github.com/mpv-player/mpv/commit/${{ fromJson(needs.params.outputs.params).sha }}\n**Build Details**: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n**Build Time**: ${{ env.long_time }}"
          tag: "mpv-${{ env.short_time }}"
          allowUpdates: true
          artifactErrorsFailBuild: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Prune old releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ (github.event.inputs.prune != null && github.event.inputs.prune == 'true') || (github.event.inputs.release == null && fromJson(needs.params.outputs.params).prune == 'true') }}
        shell: bash
        run: |
          git checkout master
          bash prunetags.sh
